#!/bin/bash
# -----------------------------------------------------------------------------
# swym.sh - Start Script for swym
#
# Environment Variable Prequisites
#
#   SWYM_OPTS    (Optional) Default swym command line args
#   SWYM_SHELL   Where/What is system shell
#
#   JAVA_HOME     Must point at your Java Development Kit installation.
#
# -----------------------------------------------------------------------------

cygwin=false

# ----- Identify OS we are running under --------------------------------------
case "`uname`" in
CYGWIN*) cygwin=true
esac

#
# Figure out the OS and cpu the same as JNA would, so the library path can be set
#
case "`uname -m`" in
  i[34567]86) JNI_CPU=i386; JNI_ALT_CPU=amd64;;
  i86pc) JNI_CPU="x86"; JNI_ALT_CPU=amd64;;
  amd64|x86_64) JNI_CPU=amd64; JNI_ALT_CPU=i386;;
  sparc*) JNI_CPU=sparc; JNI_ALT_CPU=sparcv9;;
esac

# ----- Verify and Set Required Environment Variables -------------------------

## resolve links - $0 may be a link to  home
PRG=$0
progname=`basename "$0"`

while [ -h "$PRG" ] ; do
  ls=`ls -ld "$PRG"`
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '.*/.*' > /dev/null; then
    if expr "$link" : '^/' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname ${PRG}`/${link}"
    fi
  else
    PRG="`dirname $PRG`/$link"
  fi
done

SWYM_HOME_1=`dirname "$PRG"`           # the ./bin dir
if [ $SWYM_HOME_1 = '.' ] ; then
  cwd=`pwd`
  SWYM_HOME=`dirname $cwd` 
else
  SWYM_HOME=`dirname "$SWYM_HOME_1"`  # the . dir
fi

if [ -z "$SWYM_OPTS" ] ; then
  SWYM_OPTS=""
fi

if [ -z "$JAVA_HOME" ] ; then
  JAVA_CMD='java'
else
  if $cygwin; then
    JAVA_HOME=`cygpath -u "$JAVA_HOME"`
  fi
  JAVA_CMD="$JAVA_HOME/bin/java"
fi

SWYM_SHELL=/bin/sh

# ----- Set Up The Boot Classpath -------------------------------------------

CP_DELIMETER=":"

# add swym jars for command-line execution
for j in "$SWYM_HOME"/build/java/*.jar; do
    if [ "$SWYM_CP" ]; then
        SWYM_CP="$SWYM_CP$CP_DELIMETER$j"
        else
        SWYM_CP="$j"
    fi
done

if $cygwin; then
    SWYM_CP=`cygpath -p -w "$SWYM_CP"`
fi

# ----- Set Up The System Classpath -------------------------------------------

if [ "$SWYM_PARENT_CLASSPATH" != "" ]; then
    # Use same classpath propagated from parent swym
    CP=$SWYM_PARENT_CLASSPATH
else
    # add other jars in lib to CP for command-line execution
    for j in "$SWYM_HOME"/lib/java/*.jar; do
        if [ "$CP" ]; then
            CP="$CP$CP_DELIMETER$j"
            else
            CP="$j"
        fi
    done

    if $cygwin; then
	CP=`cygpath -p -w "$CP"`
    fi
fi

# ----- Execute The Requested Command -----------------------------------------

if [ -z "$JAVA_MEM" ] ; then
  JAVA_MEM=-Xmx500m
fi

if [ -z "$JAVA_STACK" ] ; then
  JAVA_STACK=-Xss1024k
fi

JAVA_VM=-client

# Split out any -J argument for passing to the JVM.
# Scanning for args is aborted by '--'.
declare -a java_args
declare -a swym_args
    while [ $# -gt 0 ]
do
    case "$1" in
    # Stuff after '-J' in this argument goes to JVM
    -J*)
        val=${1:2}
        if [ "${val:0:4}" = "-Xmx" ]; then
            JAVA_MEM=$val
        elif [ "${val:0:4}" = "-Xss" ]; then
            JAVA_STACK=$val
        elif [ "${val}" = "" ]; then
            $JAVA_CMD -help
            echo "(Prepend -J in front of these options when using 'swym' command)" 
            exit
        elif [ "${val}" = "-X" ]; then
            $JAVA_CMD -X
            echo "(Prepend -J in front of these options when using 'swym' command)" 
            exit
        else
            if [ "${val:0:3}" = "-ea" ]; then
		VERIFY_SWYM="yes"
	    fi
            java_args=("${java_args[@]}" "${1:2}")
        fi
        ;;
     # Match switches that take an argument
     #-C|-e|-I|-S) swym_args=("${swym_args[@]}" "$1" "$2"); shift ;;
     # Match same switches with argument stuck together
     #-e*|-I*|-S*) swym_args=("${swym_args[@]}" "$1" ) ;;
     # Run with the instrumented profiler: http://jiprof.sourceforge.net/
     #--profile) 
     #  PROFILE_ARGS="-javaagent:$SWYM_HOME/lib/profile.jar -Dprofile.properties=$SWYM_HOME/lib/profile-swym.properties"
     #  SWYM_OPTS=("${SWYM_OPTS[@]}" "-X+C")
     #  VERIFY_SWYM="yes"
     #  ;;
     # Run with the instrumented profiler: http://jiprof.sourceforge.net/
     #--profile-all) 
     #  PROFILE_ARGS="-javaagent:$SWYM_HOME/lib/profile.jar -Dprofile.properties=$SWYM_HOME/lib/profile-all.properties"
     #  SWYM_OPTS=("${SWYM_OPTS[@]}" "-X+C")
     #  VERIFY_SWYM="yes"
     #  ;;
     # Run with JMX management enabled
     #--manage)
     #   java_args=("${java_args[@]}" "-Dcom.sun.management.jmxremote") ;;
     # Don't launch a GUI window, no matter what
     #--headless)
     #   java_args=("${java_args[@]}" "-Djava.awt.headless=true") ;;
     # Run under JDB
     #--jdb)
     #   if [ -z "$JAVA_HOME" ] ; then
     #     JAVA_CMD='jdb'
     #   else
     #     if $cygwin; then
     #       JAVA_HOME=`cygpath -u "$JAVA_HOME"`
     #     fi
     #     JAVA_CMD="$JAVA_HOME/bin/jdb"
     #   fi 
     #   java_args=("${java_args[@]}" "-sourcepath" "$SWYM_HOME/lib/ruby/1.8:.")
     #   SWYM_OPTS=("${SWYM_OPTS[@]}" "-X+C") ;;
     --client)
        JAVA_VM=-client ;;
     --server)
        JAVA_VM=-server ;;
     #--sample)
     #   java_args=("${java_args[@]}" "-Xprof") ;;
     # Abort processing on the double dash
     --) break ;;
     # Other opts go to swym runner
     -*) swym_args=("${swym_args[@]}" "$1") ;;
     # Abort processing on first non-opt arg
     *) break ;;
    esac
    shift
done

# Add a property to report memory max
JAVA_OPTS="$JAVA_OPTS $JAVA_VM -Dswym.memory.max=${JAVA_MEM:4} -Dswym.stack.max=${JAVA_STACK:4}"

# Append the rest of the arguments
swym_args=("${swym_args[@]}" "$@")

# Put the swym_args back into the position arguments $1, $2 etc
set -- "${swym_args[@]}"

JAVA_OPTS="$JAVA_OPTS $JAVA_MEM $JAVA_STACK"
JNI_OS="`uname -s | tr '[:upper:]' '[:lower:]'`"
case "$JNI_OS" in
darwin) JNI_PATH="$SWYM_HOME/lib/native/darwin";;
  *) JNI_PATH="$SWYM_HOME/lib/native/${JNI_OS}-${JNI_CPU}:$SWYM_HOME/lib/native/${JNI_OS}-${JNI_ALT_CPU}";;
esac
#JAVA_OPTS="$JAVA_OPTS -Djna.boot.library.path=$JNI_PATH"
JAVA_JNI="-Djava.library.path=$JNI_PATH"

if $cygwin; then
  SWYM_HOME=`cygpath --mixed "$SWYM_HOME"`
  SWYM_SHELL=`cygpath --mixed "$SWYM_SHELL"`
  
  if [[ ( "${1:0:1}" = "/" ) && ( ( -f "$1" ) || ( -d "$1" )) ]]; then
    win_arg=`cygpath -w "$1"`
    shift
    win_args=("$win_arg" "$@")
    set -- "${win_args[@]}"
  fi

  # fix JLine to use UnixTerminal
  stty -icanon min 1 -echo
  JAVA_OPTS="$JAVA_OPTS -Djline.terminal=jline.UnixTerminal"
fi

if [ "$VERIFY_SWYM" != "" ]; then
  if [ "$PROFILE_ARGS" != "" ]; then
      echo "Running with instrumented profiler"
  fi

  "$JAVA_CMD" $PROFILE_ARGS $JAVA_OPTS "$JAVA_JNI" "${java_args[@]}" -classpath "$SWYM_CP$CP_DELIMETER$CP$CP_DELIMETER$CLASSPATH" \
    "-Dswym.home=$SWYM_HOME" \
    "-Dswym.lib=$SWYM_HOME/lib" -Dswym.script=swym \
    "-Dswym.shell=$SWYM_SHELL" \
    org.cascading.js.Main $SWYM_OPTS "$@"

  # Record the exit status immediately, or it will be overridden.
  SWYM_STATUS=$?

  if [ "$PROFILE_ARGS" != "" ]; then
      echo "Profiling results:"
      cat profile.txt
      rm profile.txt
  fi

  if $cygwin; then
    stty icanon echo
  fi

  exit $SWYM_STATUS
else
  if $cygwin; then
    # exec doed not work correctly with cygwin bash
    "$JAVA_CMD" $JAVA_OPTS "$JAVA_JNI" "${java_args[@]}" -Xbootclasspath/a:"$SWYM_CP" -classpath "$SWYM_CP$CP_DELIMETER$CP$CP_DELIMETER$CLASSPATH" \
      "-Dswym.home=$SWYM_HOME" \
      "-Dswym.lib=$SWYM_HOME/lib" -Dswym.script=swym \
      "-Dswym.shell=$SWYM_SHELL" \
      org.cascading.js.Main $SWYM_OPTS "$@"

    # Record the exit status immediately, or it will be overridden.
    SWYM_STATUS=$?

    stty icanon echo

    exit $SWYM_STATUS
  else
    exec "$JAVA_CMD" $JAVA_OPTS "$JAVA_JNI" "${java_args[@]}" -classpath "$SWYM_CP$CP_DELIMETER$CP$CP_DELIMETER$CLASSPATH" \
      "-Dswym.home=$SWYM_HOME" \
      "-Dswym.lib=$SWYM_HOME/lib" -Dswym.script=swym \
      "-Dswym.shell=$SWYM_SHELL" \
      org.cascading.js.Main $SWYM_OPTS "$@"
  fi
fi

# Be careful adding code down here, you might override the exit
# status of the swym invocation.
